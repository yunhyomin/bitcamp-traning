/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.53
 * Generated at: 2022-02-15 17:00:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.spring.more.users.service.UsersVO;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/MyStudy/70_spring/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/moremore/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1635183043313L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.spring.more.users.service.UsersVO");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("    \n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("	<meta charset=\"UTF-8\">\n");
      out.write("	<title>로그인 | moremore</title>\n");
      out.write("   	<link rel=\"stylesheet\" href=\"resources/css/styles.css\" type=\"text/css\" />\n");
      out.write("</head>\n");
      out.write("<body style=\"position: relative; background: #f5f6f7;\">\n");
      out.write("    <div id=\"loginHeader\">\n");
      out.write("      <a href=\"home.jsp\"><h1 class=\"loginLogo\"><span ><img src=\"resources/images/logo2.png\"></span></a>\n");
      out.write("    </div>\n");
      out.write("    <form action=\"login.do\" method=\"post\" id=\"FormLogin\" name=\"logInForm\">\n");
      out.write("      <div id=\"loginContainer\">\n");
      out.write("        <div id=\"loginContent\">\n");
      out.write("          <div class=\"row_group\">\n");
      out.write("            <div>            \n");
      out.write("              <h3><label class=\"join\" for=\"id\">아이디</label></h3>\n");
      out.write("              <span class=\"ps_box\">\n");
      out.write("                <input\n");
      out.write("                  class=\"logininput\"\n");
      out.write("                  type=\"text\"\n");
      out.write("                  id=\"mid\"\n");
      out.write("                  name=\"user_id\"\n");
      out.write("                  maxlength=\"20\"\n");
      out.write("                  placeholder=\"아이디 입력\"\n");
      out.write("                  value=\"\" />\n");
      out.write("                  <span class=\"step_url\">@###.com</span>\n");
      out.write("                  </span>\n");
      out.write("              <span class=\"error\"></span>\n");
      out.write("            </div>\n");
      out.write("            <div>\n");
      out.write("              <h3><label class=\"join\" for=\"password\">비밀번호</label></h3>\n");
      out.write("              <span class=\"ps_box\">\n");
      out.write("                <input\n");
      out.write("                  class=\"logininput\"\n");
      out.write("                  type=\"password\"\n");
      out.write("                  id=\"mpw\"\n");
      out.write("                  name=\"user_pwd\"\n");
      out.write("                  value=\"\"\n");
      out.write("                  placeholder=\"비밀번호(5~20자리)\"/></span>\n");
      out.write("              <span class=\"error\"></span>\n");
      out.write("            </div>\n");
      out.write("            \n");
      out.write("          </div>    \n");
      out.write("          <div class=\"btn_area\">\n");
      out.write("              <input type=\"button\" id=\"btnJoin\" onclick=\"logIn_btn()\" class=\"btn_type btn_primary\" value=\"로그인\"/>\n");
      out.write("          </div>      \n");
      out.write("            <div>\n");
      out.write("            	<div>\n");
      out.write("            		<a href=\"findPassword.jsp\" class=\"findLoginInfo\" onclick=\"window.open(this.href,'_blank','width=300,height=400, left=((window.screen.width / 2) - (300 / 2)), top=((window.screen.height / 2) - (400 / 2))') scrollbars=yes\">비밀번호찾기</a>\n");
      out.write("	            	<a href=\"findId.jsp\" class=\"findLoginInfo\" onclick=\"window.open(this.href,'_blank','width=300,height=400, scrollbars=yes');return false;\">아이디찾기</a>\n");
      out.write("	            	<a href=\"joinMembership.jsp\" class=\"findLoginInfo\">회원가입</a>\n");
      out.write("            	</div>\n");
      out.write("            </div>\n");
      out.write("          </div>\n");
      out.write("        </div>\n");
      out.write("    </form>\n");
      out.write("    <div id=\"loginFooter\">@ moremore Corp.</div>\n");
      out.write("    </body>\n");
      out.write("    <script>\n");
      out.write("	const id = document.querySelector(\"#mid\");\n");
      out.write("	const password = document.querySelector(\"#mpw\");\n");
      out.write("	const error = document.querySelectorAll(\".error\");\n");
      out.write("	\n");
      out.write("	// 이벤트 리스너\n");
      out.write("	id.addEventListener(\"input\", checkId);\n");
      out.write("	password.addEventListener(\"input\", checkPassword);\n");
      out.write("	\n");
      out.write("	// 함수 작성\n");
      out.write("	function checkId() {\n");
      out.write("	  const korPattern = /[a-zA-Z0-9_-]{5,20}/;\n");
      out.write("	  if (id.value === \"\") {\n");
      out.write("	    error[0].innerHTML = \"아이디를 입력해주세요.\";\n");
      out.write("	    error[0].style.color = \"red\";\n");
      out.write("	  } else if (!korPattern.test(id.value)) {\n");
      out.write("	    error[0].innerHTML =\n");
      out.write("	      \"5~20자의 영문 소문자, 숫자와 특수기호(_),(-)만 사용 가능합니다.\";\n");
      out.write("	    error[0].style.color = \"red\";\n");
      out.write("	  } else if (korPattern.test(id.value)) {\n");
      out.write("	    error[0].innerHTML = \"\";\n");
      out.write("	    error[0].style.color = \"red\";\n");
      out.write("	  }\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	function checkPassword() {\n");
      out.write("	  const pwPattern = /[a-zA-Z0-9\\[\\]\\{\\}\\/\\(\\)\\.\\?\\<\\>!@#$%^&*]{8,16}/;\n");
      out.write("	  if (password.value === \"\") {\n");
      out.write("	    error[1].innerHTML = \"비밀번호를 입력해주세요.\";\n");
      out.write("	    error[1].style.color = \"red\";\n");
      out.write("	  } else if (pwPattern.test(password.value)) {\n");
      out.write("	    error[1].innerHTML = \"\";\n");
      out.write("	  } else if (!pwPattern.test(password.value)) {\n");
      out.write("	    error[1].innerHTML = \"8~16자 영문 대 소문자, 숫자, 특수문자를 사용하세요.\";\n");
      out.write("	    error[1].style.color = \"red\";\n");
      out.write("	  }\n");
      out.write("	}\n");
      out.write("\n");
      out.write("	function logIn_btn() {\n");
      out.write("		var form = document.logInForm // 폼 변수에 액션태그 loginForm 연결 (name값에 연결)\n");
      out.write("		if (!form.mid.value){\n");
      out.write("			alert(\"아이디를 입력해주세요\");\n");
      out.write("			return;\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		if (!form.mpw.value) {\n");
      out.write("			alert(\"비밀번호를 입력해주세요\");\n");
      out.write("			return;\n");
      out.write("		}\n");
      out.write("		form.submit();\n");
      out.write("	}\n");
      out.write("	</script>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

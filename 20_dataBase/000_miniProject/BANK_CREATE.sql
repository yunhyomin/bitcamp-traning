-- 테이블 순서는 관계를 고려하여 한 번에 실행해도 에러가 발생하지 않게 정렬되었습니다.

-- EMPLOYEES Table Create SQL
CREATE TABLE EMPLOYEES
(
    EMPNO         VARCHAR2(10)    NOT NULL, 
    EMPPW         VARCHAR2(20)    NOT NULL, 
    EMPNAME       VARCHAR2(50)    NOT NULL, 
    DEPARTMENT    VARCHAR2(50)    NOT NULL, 
    RANK          VARCHAR2(50)    NOT NULL, 
    HIREDATE      DATE            NOT NULL, 
    EEMAIL        VARCHAR2(20)    NULL, 
    EPHONE        NUMBER          NULL, 
    EADDRESS      VARCHAR2(50)    NULL, 
    EBIRTH        DATE            NOT NULL, 
    CONSTRAINT PK_EMPLOYEES PRIMARY KEY (EMPNO)
)
/

COMMENT ON TABLE EMPLOYEES IS '직원'
/

COMMENT ON COLUMN EMPLOYEES.EMPNO IS '직원번호'
/

COMMENT ON COLUMN EMPLOYEES.EMPPW IS '직원비밀번호'
/

COMMENT ON COLUMN EMPLOYEES.EMPNAME IS '직원이름'
/

COMMENT ON COLUMN EMPLOYEES.DEPARTMENT IS '부서'
/

COMMENT ON COLUMN EMPLOYEES.RANK IS '직급'
/

COMMENT ON COLUMN EMPLOYEES.HIREDATE IS '입사일'
/

COMMENT ON COLUMN EMPLOYEES.EEMAIL IS '이메일'
/

COMMENT ON COLUMN EMPLOYEES.EPHONE IS '전화번호'
/

COMMENT ON COLUMN EMPLOYEES.EADDRESS IS '주소'
/

COMMENT ON COLUMN EMPLOYEES.EBIRTH IS '생년월일'
/


-- PRODUCTS Table Create SQL
CREATE TABLE PRODUCTS
(
    FNNNO      VARCHAR2(30)    NOT NULL, 
    FNNTYPE    VARCHAR2(20)    NOT NULL, 
    FNNNAME    VARCHAR2(20)    NOT NULL, 
    RATE       NUMBER(4,2)     NOT NULL, 
    EMPNO      VARCHAR2(10)    NOT NULL, 
    KEEP       VARCHAR2(10)    NOT NULL, 
    CONSTRAINT PK_PRODUCTS PRIMARY KEY (FNNNO)
)
/

COMMENT ON TABLE PRODUCTS IS '상품'
/

COMMENT ON COLUMN PRODUCTS.FNNNO IS '상품번호'
/

COMMENT ON COLUMN PRODUCTS.FNNTYPE IS '상품유형'
/

COMMENT ON COLUMN PRODUCTS.FNNNAME IS '상품이름'
/

COMMENT ON COLUMN PRODUCTS.RATE IS '이자율'
/

COMMENT ON COLUMN PRODUCTS.EMPNO IS '담당직원번호'
/

COMMENT ON COLUMN PRODUCTS.KEEP IS '진행여부(진행/중단)'
/

ALTER TABLE PRODUCTS
    ADD CONSTRAINT FK_PRODUCTS_EMPNO_EMPLOYEES_EM FOREIGN KEY (EMPNO)
        REFERENCES EMPLOYEES (EMPNO)
/


-- USERS Table Create SQL
CREATE TABLE USERS
(
    USERNO      NUMBER          NOT NULL, 
    USERID      VARCHAR2(20)    NOT NULL, 
    USERPW      VARCHAR2(20)    NOT NULL, 
    USERNAME    VARCHAR2(20)    NOT NULL, 
    PHONE       NUMBER          NOT NULL, 
    EMAIL       VARCHAR(30)     NULL, 
    ADDRESS     VARCHAR2(50)    NULL, 
    BIRTH       DATE            NOT NULL, 
    CONSTRAINT PK_USERS PRIMARY KEY (USERID)
)
/

CREATE SEQUENCE USERS_SEQ
START WITH 1
INCREMENT BY 1;
/*

CREATE OR REPLACE TRIGGER USERS_AI_TRG
BEFORE INSERT ON USERS 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT USERS_SEQ.NEXTVAL
    INTO :NEW.USERNO
    FROM DUAL;
END;
*/

--DROP TRIGGER USERS_AI_TRG;
/

--DROP SEQUENCE USERS_SEQ;
/

COMMENT ON TABLE USERS IS '고객'
/

COMMENT ON COLUMN USERS.USERNO IS '고객번호'
/

COMMENT ON COLUMN USERS.USERID IS '고객아이디'
/

COMMENT ON COLUMN USERS.USERPW IS '고객비밀번호'
/

COMMENT ON COLUMN USERS.USERNAME IS '고객이름'
/

COMMENT ON COLUMN USERS.PHONE IS '전화번호'
/

COMMENT ON COLUMN USERS.EMAIL IS '이메일'
/

COMMENT ON COLUMN USERS.ADDRESS IS '주소'
/

COMMENT ON COLUMN USERS.BIRTH IS '생년월일'
/


-- BANKNUMBER Table Create SQL
CREATE TABLE BANKNUMBER
(
    BANKNO       VARCHAR2(20)    NOT NULL, 
    STARTDATE    DATE            NOT NULL, 
    USERID       VARCHAR2(20)    NOT NULL, 
    EMPNO        VARCHAR2(10)    NOT NULL, 
    FNNNO        VARCHAR2(30)    NOT NULL, 
    CONSTRAINT PK_BANKNUMBER PRIMARY KEY (BANKNO)
)
/

COMMENT ON TABLE BANKNUMBER IS '계좌'
/

COMMENT ON COLUMN BANKNUMBER.BANKNO IS '계좌번호(USERNO+PHONE)'
/

COMMENT ON COLUMN BANKNUMBER.STARTDATE IS '계좌생성일'
/

COMMENT ON COLUMN BANKNUMBER.USERID IS '고객아이디'
/

COMMENT ON COLUMN BANKNUMBER.EMPNO IS '담당직원번호'
/

COMMENT ON COLUMN BANKNUMBER.FNNNO IS '상품번호'
/

ALTER TABLE BANKNUMBER
    ADD CONSTRAINT FK_BANKNUMBER_USERID_USERS_USE FOREIGN KEY (USERID)
        REFERENCES USERS (USERID)
/

ALTER TABLE BANKNUMBER
    ADD CONSTRAINT FK_BANKNUMBER_FNNNO_PRODUCTS_F FOREIGN KEY (FNNNO)
        REFERENCES PRODUCTS (FNNNO)
/

ALTER TABLE BANKNUMBER
    ADD CONSTRAINT FK_BANKNUMBER_EMPNO_EMPLOYEES_ FOREIGN KEY (EMPNO)
        REFERENCES EMPLOYEES (EMPNO)
/


-- HISTORY Table Create SQL
CREATE TABLE HISTORY
(
    NO          NUMBER          NOT NULL, 
    DATETIME    VARCHAR2(20)    NOT NULL, 
    TYPE        VARCHAR2(20)    NOT NULL, 
    MONEY       VARCHAR2(20)    NOT NULL, 
    BANKNO      VARCHAR2(20)    NOT NULL, 
    CONSTRAINT PK_HISTORY PRIMARY KEY (NO)
)
/

CREATE SEQUENCE HISTORY_SEQ
START WITH 1
INCREMENT BY 1;
/
create sequence banknumber_seq
start with 995
increment by 1;
/*CREATE OR REPLACE TRIGGER HISTORY_AI_TRG
BEFORE INSERT ON HISTORY 
REFERENCING NEW AS NEW FOR EACH ROW 
BEGIN 
    SELECT HISTORY_SEQ.NEXTVAL
    INTO :NEW.NO
    FROM DUAL;
END;
*/

--DROP TRIGGER HISTORY_AI_TRG;
/

--DROP SEQUENCE HISTORY_SEQ;
/

COMMENT ON TABLE HISTORY IS '계좌입출금내역'
/

COMMENT ON COLUMN HISTORY.NO IS '거래번호'
/

COMMENT ON COLUMN HISTORY.DATETIME IS '거래일시'
/

COMMENT ON COLUMN HISTORY.TYPE IS '거래유형(입금/출금)'
/

COMMENT ON COLUMN HISTORY.MONEY IS '금액'
/

COMMENT ON COLUMN HISTORY.BANKNO IS '계좌번호'
/

ALTER TABLE HISTORY
    ADD CONSTRAINT FK_HISTORY_BANKNO_BANKNUMBER_B FOREIGN KEY (BANKNO)
        REFERENCES BANKNUMBER (BANKNO)
/

commit;
select*from employees;

insert into employees
values('e6','pw','직원6','영업부','사원',sysdate,'email',999999,'address','19960507');
commit;
alter table products modify fnnname varchar2(100);

alter table users add exist varchar2(10);
alter table banknumber add exist varchar2(10);